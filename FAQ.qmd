# 拾遗

## 批量线性回归总表

> 来自同学汪意茹的提问：有多个变量和自变量，想分别计算两两之间的线性回归模型，将参数以表格输出。

可以使用 `lm()` 进行线性回归，并提取所需的统计量，最终整理成一个表格。下面是 R 代码：

```{r}
# 示例数据
set.seed(123)
n = 100
Y = as.data.frame(matrix(rnorm(n * 5), ncol = 5))
X = as.data.frame(matrix(rnorm(n * 5), ncol = 5))
colnames(Y) = paste0("Y", 1:5)
colnames(X) = paste0("X", 1:5)

# 计算线性回归结果
results = data.frame()
for (y in colnames(Y)) {
  for (x in colnames(X)) {
    model = lm(Y[[y]] ~ X[[x]])
    summary_model = summary(model)
    
    # 提取统计量
    slope = coef(model)[2]
    intercept = coef(model)[1]
    f_stat = summary_model$fstatistic[1]
    df1 = summary_model$fstatistic[2]
    df2 = summary_model$fstatistic[3]
    p_value = pf(f_stat, df1, df2, lower.tail = FALSE)
    r_squared = summary_model$r.squared
    
    # 存入结果
    results = rbind(results, data.frame(
      Dependent = y, Independent = x,
      Slope = slope, Intercept = intercept,
      F = f_stat, df1 = df1, df2 = df2,
      p_value = p_value, R_squared = r_squared
    ))
  }
}

# 查看结果
kableExtra::kable(results)
```

这个代码的核心逻辑：

- 生成 5 个因变量和 5 个自变量的随机数据。
- 使用 `lm()` 进行回归，并提取斜率、截距、F 统计量、自由度（df1, df2）、p 值和 R²。
- 结果整理成 `data.frame` 并输出。

你可以用自己的数据替换 `Y` 和 `X`，代码仍然适用。

::: {.callout-tip}
**自由度是什么?**

即如何理解类似下面的结果。

```
Call:
lm(formula = y ~ x, data = data.frame(x = 1:10, y = 21:30))

Residuals:
       Min         1Q     Median         3Q        Max 
-4.751e-15 -2.337e-15 -5.166e-16  9.302e-16  9.668e-15 

Coefficients:
             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 2.000e+01  2.891e-15 6.919e+15   <2e-16 ***
x           1.000e+00  4.659e-16 2.147e+15   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 4.231e-15 on 8 degrees of freedom
Multiple R-squared:      1,	Adjusted R-squared:      1 
F-statistic: 4.608e+30 on 1 and 8 DF,  p-value: < 2.2e-16
```

自由度（Degrees of Freedom, DF）在回归分析中表示用于估计统计参数的独立数据点的数量。不同的自由度在回归分析中有不同的含义：

1. **回归自由度（df1）**：回归模型的自由度，等于自变量的个数（不包括截距）。在简单线性回归中，只有一个自变量，所以 df1 = 1。

2. **残差自由度（df2）**：误差项的自由度，计算公式是 `n - k - 1`，其中：
   - `n` 是样本大小，
   - `k` 是自变量的个数（不包括截距），
   - `1` 是因为估计了截距。

在你的回归结果中：

- `F-statistic: 4.608e+30 on 1 and 8 DF`，表示：
  - **df1 = 1**（因为只有一个自变量 `x`）。
  - **df2 = 8**（样本量 `n = 10`，减去 `1` 个自变量和 `1` 个截距，即 `10 - 1 - 1 = 8`）。

总结：

- **回归自由度（df1）= 1**（自变量 `x`）。
- **残差自由度（df2）= 8**（数据点 `10` 个，去掉 `1` 个自变量和 `1` 个截距）。

:::



## 多变量分布和相关性作图

> 来自同学汪意茹的提问：如何绘制多变量之间的关系图？

使用 `GGally` 包中的 `ggpairs` 函数可以绘制多变量之间的关系图。

下面是一个可复现的示例：

```{r}
library(GGally)
library(ggplot2)

# 生成示例数据
set.seed(123)
df = as.data.frame(matrix(rnorm(100 * 5), ncol = 5))
colnames(df) = paste0("Var", 1:5)

# 绘制变量间的关系
ggpairs(df, 
        lower = list(continuous = wrap("points", alpha = 0.5)),  # 下三角：散点图
        diag = list(continuous = wrap("densityDiag")),          # 对角线：密度图
        upper = list(continuous = wrap("cor", size = 5)))       # 上三角：相关系数
```

上面的代码中，首先生成了一个 100 行 5 列的数据框，然后使用 `ggpairs` 函数绘制了变量间的关系图。其中，

- `lower` 参数用于指定下三角的图形，这里使用了 `points` 函数绘制散点图，`alpha` 参数用于指定透明度；
- `diag` 参数用于指定对角线的图形，这里使用了 `densityDiag` 函数绘制密度图；
- `upper` 参数用于指定上三角的图形，这里使用了 `cor` 函数绘制相关系数图，`size` 参数用于指定相关系数的字体大小。

`GGally` 包还提供了其他的图形函数，例如 `barDiag`、`boxplotDiag`、`dotplotDiag`、`histDiag`、`qqDiag`、`rcorr`、`rcorrDiag`、`rcorrPlot`、`rcorrPlotDiag`、`smoothDiag`、`textDiag` 等，可以根据需要选择合适的图形函数。
