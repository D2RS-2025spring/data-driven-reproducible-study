---
title: "认识可重复性研究"
author: "高春辉"
format:
  revealjs: 
    theme: white
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    css: slide.css
    footer: '[课程仓库](https://github.com/D2RS-2025spring)'
  pptx:
    reference-doc: template.pptx
bibliography: 
    - ../references.bib
    - ../packages.bib
---


## 可重复性危机与其影响因素

当前，许多研究因数据处理和分析过程中的多变性而存在可重复性问题。

- 数据处理和分析的多变性
- 实验方法不透明
- 数据记录不完整
- 代码缺乏注释

---

## 可重复性危机的成因

- **实验设计不严谨**
- **数据管理不规范**
- **软件工具多样性**
- **透明度不足**

---

## 可重复性危机的后果

- 研究结果不可靠
- 资源浪费
- 影响公众对科学的信任

---

## 可重复性研究的定义

- 采用统一标准
- 详细记录研究过程
- 保障实验可重现

---

## 可重复性研究的重要意义

- 衡量研究可信度的重要标志
- 保障数据处理和分析过程可验证
- 构建标准化、跨平台的研究环境

## 实验设计与数据收集的可重复性

- 细化实验步骤
  - Material and Methods
  - Data availability
  - Open access
- 统一操作协议
  - [protocols.io](https://protocols.io)
  - [bio-protocol.org](https://bio-protocol.org)

---

## 数据分析过程的可重复性

**构建跨平台可重复性研究环境**

- 硬件与软件环境标准化
- 文档与代码管理
- 开放数据与代码共享

---

## CPU/GPU 架构 {.smaller}

- CPU 架构
  - **x86(Intel, AMD)**:复杂指令集（CISC），擅长通用计算。
  - **ARM(Apple, Qualcomm, Huawei)**:精简指令集（RISC），功耗低、能效高。
- GPU 架构
  - **NVIDIA(CUDA)**：专为并行计算优化，广泛用于 AI 和科学计算。
  - **Apple(MPS)**：与 Apple Silicon 紧密集成，优化功耗与图形性能。
  - **AMD RDNA/CDNA**：RDNA 侧重于游戏图形，CDNA 适用于高性能计算和数据中心。

---

## 软件环境 {.smaller}

- 操作系统
  - **Linux**：Ubuntu 22.04/24.04, CentOS 8/9, Debian 12/13
  - **Windows**：Windows 10/11
  - **macOS**：macOS 11/12/13
- 编程语言
  - **Python**：Python 3.10/3.11/3.12
  - **R**：R 4.3.1/4.4.1
- 深度学习框架
  - **PyTorch**：PyTorch 2.1.0/2.2.0
  - **TensorFlow**：TensorFlow 2.10.0/2.11.0

---

## 环境变量 {.smaller}

- 系统环境变量
  - `PATH`：系统路径，用于指定可执行文件的路径
  - `LD_LIBRARY_PATH`：动态链接库路径，用于指定动态链接库的路径
  - `PYTHONPATH`：Python 路径，用于指定 Python 路径
- 用户环境变量
  - `CONDA_DEFAULT_ENV`：启用的默认 conda 环境名称
  - `CONDA_PREFIX`：指定 conda 软件的路径
  - `R_LIBS_USER`：用户 R 包的路径

---

## 包管理

- 系统软件
  - Ubuntu：`apt`
  - macOS：`brew`
  - Windows：`choco`

```bash
# 在 Ubuntu 上使用 apt 安装软件
sudo apt install -y python3-pip
```

```bash
# 在 macOS 上使用 brew 安装软件
brew install python3-pip
```

```bash
# 在 Windows 上使用 choco 安装软件
choco install python3-pip
```

---

## Python 包依赖管理

::: {.columns}

::: {.column width="50%"} 

- Python 包依赖管理工具
  - Conda(miniconda, mamba, Anaconda)
  - pip


:::

::: {.column width="50%"}

- 软件源
  - conda-forge: 科学计算
  - bioconda: 生物信息学
  - pytorch: 深度学习

:::

:::

```bash
# 使用 conda 安装 Python 软件
conda install -c conda-forge python=3.10
```

```bash
# 使用 pip 安装 Python 软件
pip install python=3.10
```

```bash
# 使用 conda 安装 PyTorch 源中包含的软件
conda install -c pytorch torchvision
```


---

### R 包管理

::: {.columns}

::: {.column width="50%"}

- R 包依赖管理
  - `renv`：R 包依赖管理
  - `pak`：R 包安装

:::

::: {.column width="50%"}

- 软件源
  - CRAN: 最大的 R 包仓库
  - Bioconductor: 生物信息学专有

:::

:::

```R
install.packages("renv") # 安装 renv
renv::restore() # 恢复 renv 环境
```

```R
install.packages(c("pak", "BiocManager")) # 安装 CRAN 包
pak::pak("tidyverse") # 使用 pak 安装 R 包
BiocManager::install("DESeq2") # 安装 Bioconductor 包
```

---

### 软件源镜像

- 使用软件源镜像可以加速访问速度
- 常用的软件源镜像：
  - 清华大学：`https://mirrors.tuna.tsinghua.edu.cn`
  - 中国科学技术大学：`https://mirrors.ustc.edu.cn`
  - 华中科技大学：`https://mirrors.hust.edu.cn`
  - 上海交通大学：`https://mirrors.sjtug.sjtu.edu.cn`

---

### 中国科技大学开源软件镜像

<section>
  <iframe src="https://mirrors.ustc.edu.cn/" width="100%" height="600px"></iframe>
</section>


---

## 数据与分析的可重复

- 数据
  - 原始数据
  - 数据预处理
  - 数据的保存
- 分析（代码）
  - 代码的编写和注释
  - 代码的保存和迭代
  - 编写代码的文档

---

### 数据格式统一

#### CSV 格式示例

```csv
id,name,age
1,张三,20
2,李四,21
3,王五,22
```

#### JSON 格式示例

```json
[
  { "id": 1, "name": "张三", "age": 20 },
  { "id": 2, "name": "李四", "age": 21 },
  { "id": 3, "name": "王五", "age": 22 }
]
```

---

#### XML 格式示例

```xml
<data>
  <person>
    <id>1</id>
    <name>张三</name>
    <age>20</age>
  </person>
  <person>
    <id>2</id>
    <name>李四</name>
    <age>21</age>
  </person>  
</data>
```

#### YAML 格式示例

```yaml
id: 1
name: 张三
age: 20
```

---

### 数据预处理规范

- 处理缺失值
- 变量标准化
- 确保数据质量

## 数据分析与结果解释的可重复性

### 透明的数据分析方法

`cars` 数据集有 50 行 2 列，分别是 speed 和 dist。

```r
# 读取 CSV 文件
cars = read.csv("cars.csv")

# 查看数据结构
str(cars)
```


```{r}
#| echo: false
# 以 cars 数据集为例
str(cars)
```

---

### 结果解释的不确定性

- 讨论可能的误差
- 评估数据分析的稳健性
- 优秀的数据可视化

```{r}
#| echo: true
# 以 cars 数据集为例
plot(cars$speed, cars$dist, main="cars", xlab="speed", ylab="dist")
```

---

### 代码的注释

- 代码的注释应该清晰、完整、易于理解
- 代码的注释应该包括：
  - 代码的功能
  - 代码的输入和输出
  - 代码的实现细节


---

## 如何快速掌握 R 或 Python

- 了解基础语法
- 熟悉常用数据结构
- 学习常见库和工具
- 实战练习
- 阅读文档 & 搜索问题
- 参与社区 & 代码优化
- 构建完整项目

---

## 了解基础语法

- 变量、数据类型、运算符
- 控制结构（条件、循环）
- 函数定义

```{r}
#| echo: true
x = c(1, 2, 3) # 创建一个向量
mean(x) # 计算向量的平均值
```

```{python}
#| echo: true
x = [1, 2, 3] # 创建一个列表
sum(x) / len(x) # 计算列表的平均值
```

---

## 熟悉常用数据结构

- 列表（vector/list）
- 数据框（data.frame/DataFrame）
- 字典（dict）

```{r}
df = data.frame(a = 1:3, b = c("x", "y", "z"))
```

```{python}
import pandas as pd
df = pd.DataFrame({"a": [1, 2, 3], "b": ["x", "y", "z"]})
```

---

## 学习常见库和工具 {.smaller}

::: {.columns}

::: {.column width="50%"}

- **R:** 
  - `tidyverse`：数据处理和可视化
  - `ggplot2`：数据可视化
  - `tidymodels`：机器学习
  - `dada2`：微生物测序数据处理
  - `DESeq2`：差异表达分析
  - `Seurat`：单细胞测序数据处理
  - `devtools`：软件包开发

:::

::: {.column width="50%"}

- **Python:** 
  - `pandas`：数据处理
  - `numpy`：数值计算
  - `matplotlib`：数据可视化
  - `seaborn`：数据可视化
  - `pytorch`：深度学习
  - `scikit-learn`：机器学习
  - `plotly`：数据可视化

:::

:::

---

## 多加实战练习

- 处理 CSV 数据
- 生成可视化图表
- 编写自动化脚本

---

## 阅读文档 & 搜索问题

- R: `?mean`
- Python: `help(sum)`
- **AI 助手**
- **官方文档**
- 阅读源代码

---

## 参与社区 & 代码优化

- 提问和回答问题
- 参考开源代码
- 学习最佳实践

---

## 构建完整项目

- 选择感兴趣的主题
- 数据分析、自动化、机器学习
- 完整开发一个小项目

---

## 关键点总结

1. 多写代码
2. 多实践
3. 主动查资料
4. 持续优化代码

---

# 终端/Linux 命令行

[Linux 命令行入门](../linux-shell.qmd)

## 终端/Linux 命令行

掌握**没有用户界面的应用程序**的用法

- 了解终端/Linux 命令行
- 熟悉常用命令
- 参数、选项、文件路径

---

## 为什么 Linux 命令行越来越流行

- 命令行是所有现代操作系统的标配
- 支持批量任务和自动化
- 跨平台管理
- 理解底层系统，提高问题排查能力

---

## 常用命令概述 {.smaller}

- 打印信息

```bash
echo "Hello, Linux!"
```

- 目录结构

```bash
ls -l
```

- 文件操作

```bash
cp file1.txt file2.txt
mv oldname.txt newname.txt
rm file1.txt
```

- 文件内容

```bash
cat file1.txt
less /var/log/syslog
head -n 20 file1.txt
tail file1.txt
```

---

## 管道与重定向

- 管道：将一个命令的输出作为另一个命令的输入
- 重定向：将命令的输出保存到文件中
- 标准输入（`STDIN`）、标准输出（`STDOUT`）、标准错误（`STDERR`）

```bash
ls -l | grep txt
echo "Hello" > output.txt
cat *.txt | wc -l > total_lines.txt

# 重定向标准错误
ls -l /nonexistent 1>output.txt 2>error.txt
```

---

# Git 版本控制


## 什么是 Git

- Git 是一个分布式版本控制系统
- 分布式：每个用户都有一个完整的仓库
- 版本控制系统：记录文件的变化

## Git 的基本概念 {.smaller}

::: {.columns}

::: {.column width="50%"}

**基本概念**

- 仓库（repository）：存储文件的地方
  - 本地仓库：`~/project/repo`
  - 远程仓库：`origin`、`upstream`
- 提交（commit）：
  - 保存文件的变化
- 推送（push）：
  - 将本地仓库的提交推送到远程仓库
- 拉取（pull）：
  - 将远程仓库的提交拉取到本地仓库

:::

::: {.column width="50%"}

**分支（branch）**

- 隔离开发
- 合并（merge）：
  - 合并分支

**标签（tag）**

- 版本号
- 发布版本

:::

:::

---

## 结语

- 可重复性是科学研究的基石
- 需要标准化实验、数据和分析方法
- 共同推动开放、透明的科学生态


---

## 获取课程资源 {.smaller .scrollable}

课程仓库：[https://github.com/D2RS-2025spring](https://github.com/D2RS-2025spring)

::: {.columns}

::: {.column width="50%"}

**重要目录**

- `slides`: 课程 PPT
- `paper`: 课上要讲的论文（项目来源）
- 开源的数据和分析代码
  - `ratio`：分组数据统计分析
  - `deg`：转录组学数据分析
  - `bacteria-ID`：拉曼光谱+深度学习鉴定细菌
- `example`：示例数据（讲义用）
- `data`：大型的数据集（讲义用）
- `output`：运行讲义的过程文件
- `_book`：编译后的课程讲义

:::

::: {.column width="50%"}

**重要文件**

- `README.md`：课程介绍
- `renv.lock`：R 包依赖管理文件
- `environment.yml`：conda 环境配置文件
- `*.qmd`：课程讲义的源文件
  - 使用这些文件可以编译出课程讲义
- `*.bib`：参考文献数据库
- `LICENSE`：课程许可证


:::

:::

---

## 如何获取课程资源

- 安装 Git
- 安装 R 和 Python
- 安装 Conda（Python）
- 安装 RStudio 或 VSCode

```bash
# 克隆课程仓库
git clone https://github.com/D2RS-2025spring/data-driven-reproducible-study
# 或者
git clone https://gitee.com/gaospecial/data-driven-reproducible-study

# 创建 conda 环境
conda create -n data-driven-reproducible-study -f environment.yml
```

```r
# 安装 renv
install.packages("renv")

# 恢复 renv 环境
renv::restore()
```

---

## 课程讲义在线阅读

- [阿里云](https://d2rs.bio-spring.top)
- [GitHub Pages](https://d2rs-2025spring.github.io/data-driven-reproducible-study/)

---

## 课堂练习及课后作业

- 配置一个可重复性的研究环境

<iframe src="https://d2rs.bio-spring.top/setup-a-reproducible-environment.html" width="100%" height="600px"></iframe>

--- 

## 自主学习

**请参考课程讲义自主学习**

- Linux 命令行: [Linux 命令行入门](https://d2rs.bio-spring.top/linux-shell.html)
- R 语言入门: [R 语言入门](https://d2rs.bio-spring.top/r-basic.html)
- Python 入门: [Python 入门](https://d2rs.bio-spring.top/python-basic.html)
- Git 入门: [Git 入门](https://d2rs.bio-spring.top/git-basic.html)
- ggplot2 入门: [ggplot2 入门](https://d2rs.bio-spring.top/ggplot2-cheatsheet.html)