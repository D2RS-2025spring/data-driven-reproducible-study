---
title: "使用 GitHub 协作"
author: "高春辉"
format:
  revealjs: 
    theme: white
    echo: true
    message: true
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    css: slide.css
    footer: '[课程仓库](https://github.com/D2RS-2025spring)'
  pptx:
    reference-doc: template.pptx
bibliography: 
    - ../references.bib
    - ../packages.bib
---

## 与全世界开发者协作

- 开发者之间的协作依托与代码托管平台
  - GitHub
  - GitLab
  - Gitee
- GitHub 是全球最流行的代码托管平台之一
  - 提供了强大的协作工具
  - 支持版本控制、代码审查、自动化流程等功能。

## 仓库（Repository）

- 仓库是 GitHub 的核心概念，它用于存储项目的代码、文档和资源。
- 每个仓库都可以公开（Public）或私有（Private）。
- 支持 Git 版本控制，使开发者可以追踪代码的变更。

**README 文件：通常包含项目简介、安装方法和使用指南。**


## 组织（Organization）

- GitHub 允许用户创建组织（Organization）来管理多个仓库和成员。
- 组织适用于团队协作，可设置不同的访问权限，并提供团队管理功能。

**主要功能**：

- **团队（Teams）**：可以为不同的成员分配不同的权限。
- **权限管理**：可设置成员的访问级别，如管理员、写入权限或只读权限。


## 拉取请求（Pull Request, PR）

- Pull Request（简称 PR）是 GitHub 代码协作的核心功能。
- 开发者可以提交代码变更请求，等待团队成员审核并合并。

**主要流程**：

1. 在自己的分支中进行代码修改。
2. 提交 Pull Request，描述变更内容。
3. 其他开发者进行代码审核（Review）。
4. 审核通过后，合并到主分支。


## 问题（Issue） {.scrollable}

- Issue 用于跟踪任务、Bug 以及改进建议。
- 它可以与 PR 关联，帮助开发者高效管理项目。

::: {.callout-note}
**如何在 GitHub Issue 上提问**

在 GitHub Issue 上提问时，确保问题清晰、可复现，并提供足够的信息，以便维护者或社区成员快速理解和解决。以下是一个高质量 Issue 的关键要素：

**1. 写一个清晰的标题**

标题应该简洁明了，概括问题的核心。例如：

- ✅ **“安装后运行时报错：ModuleNotFoundError”**
- ❌ **“求助！！！出错了”**

**2. 说明问题**

在 Issue 描述中，回答以下问题：

- **发生了什么？**（简要描述问题）
- **你期望的行为是什么？**
- **问题如何复现？**（提供最小可复现步骤）
- **是否有错误日志？**（截图或代码块格式化错误信息）

示例：

````
## 问题描述

在运行 `my_script.py` 时，程序报错 `ModuleNotFoundError: No module named 'requests'`。

## 复现步骤

1. 安装项目 `git clone https://github.com/example/repo.git`
2. 运行 `python my_script.py`
3. 看到如下错误：
   ```
   Traceback (most recent call last):
     File "my_script.py", line 1, in <module>
       import requests
   ModuleNotFoundError: No module named 'requests'
   ```
````

**3. 提供环境信息**

不同环境可能导致不同的 Bug，所以提供你的系统和依赖信息：

```
- 操作系统: macOS 14.2 / Ubuntu 22.04 / Windows 11
- Python 版本: 3.9.6
- 依赖项: `pip freeze | grep requests` 结果为空
- 相关软件或工具版本：Git 2.34.1，Node.js 18.16.0
```

**4. 附加上下文**

- 你是否尝试过解决？哪些方法不起作用？
- 你是否查阅了 README、Wiki、FAQ 或已有 Issue？
- 是否有截图、GIF 或代码片段可以辅助理解？

**5. 避免无效 Issue**

- **避免模糊的描述**：“软件坏了” → **具体描述问题**。
- **避免催促**：“快点帮忙！” → **保持礼貌**，维护者通常是志愿者。
- **避免重复 Issue**：先搜索是否已有类似问题。

一个格式良好的 Issue，不仅能让维护者快速响应，还能帮助其他开发者遇到相同问题时更快找到解决方案。

:::

## 代码审查（Review）

GitHub 提供代码审查功能，开发者可以对 PR 进行评论和建议，提高代码质量。

主要功能：

- **批准（Approve）**：表示代码可以合并。
- **请求更改（Request Changes）**：开发者需要修改代码。
- **评论（Comment）**：对特定代码行提出建议。

## GitHub Actions

GitHub Actions 是 GitHub 提供的 CI/CD（持续集成/持续部署）工具。开发者可以通过 YAML 文件定义自动化任务，如测试、构建、部署等。

主要功能：

- **工作流（Workflow）**：定义自动化流程。
- **作业（Job）**：工作流中的任务。
- **步骤（Step）**：具体执行的操作，如运行脚本。
- **触发器（Trigger）**：可以在 Push、PR、Issue 变更时触发工作流。

## GitHub Pages

GitHub Pages 是 GitHub 提供的静态网站托管服务，适用于个人博客、软件文档等。

主要功能：

- **自动部署**：支持从 `main` 或 `gh-pages` 分支自动构建网站。
- **自定义域名**：支持绑定自定义域名。

---

### 启用 GitHub Pages 的方法

1. 在仓库的 `Settings` > `Pages` 选项中配置发布源。
2. 选择 `main` 分支或 `docs` 目录作为站点源。
3. 访问 `https://username.github.io/repository` 预览。

---

### 将 GitHub Pages 发布到 Netlify {.smaller}

要将 GitHub Pages (`gh-pages` 分支) 发布到 Netlify，可以按照以下步骤进行：

1. **登录 Netlify**：访问 [Netlify](https://www.netlify.com/) 并使用 GitHub 账号登录。
2. **创建新站点**：在 Netlify 仪表盘点击 **“Add new site” → “Import from GitHub”**。
3. **选择仓库**：授权 Netlify 访问 GitHub，然后选择你的项目仓库。
4. **配置构建**：依据页面指引配置相关参数。
5. **部署**：点击 **“Deploy site”**，Netlify 会自动拉取 `gh-pages` 分支内容并发布。


## 结论

GitHub 提供了丰富的功能，涵盖代码托管、协作、自动化和网站托管等方面。掌握这些功能可以帮助开发者更高效地管理项目，提高团队协作效率。

---

## 项目演示 {.smaller}

### 使用 GitHub 搭建一个自己的个人网站

::: {.columns}

::: {.column width=40%}
#### 个人网站项目
- 一个五脏俱全的个人网站，包含：
  - 个人简介
  - 教育经历
  - 曾获荣誉
  - 联系方式
:::

::: {.column width=60%}
#### 实施步骤

- 创建一个 Git 项目，用于存放网站源码
- 使用 Quarto Markdown 编写网站内容。
- 使用 GitHub Pages 部署网站。
- 使用 Netlify 部署网站。
- 为网站配置一个自己的域名。
:::

:::

## 简历网站提示词

- 配置 Cline
- 新建一个项目
- 使用提示词

> 你现在在一个个人网站项目的目录中。我需要让你帮我常见一个简单的静态网站项目，内容包括个人简介、教育经历、曾获荣誉、联系方式等。这些内容都需要你自己编写。你可以以一个刚刚毕业的博士生为范本展开想象。网站需要具有现代化的外观，并采用学术风格的主题。为网站创建部署到GitHub Pages上的配置。请使用 Quarto site 的功能进行创作。

## 项目上传到 GitHub

- 创建一个新的 Git 项目
- 将项目上传到 GitHub
- 配置 GitHub Pages
- 部署网站

## 项目上传到 Netlify

- 登录 Netlify
- 导入新站点
- 配置构建
- 部署网站

## 配置自定义域名

- 在域名注册商处购买一个域名
- 在 GitHub Pages 中配置自定义域名
- 在 Netlify 中配置自定义域名
- 在域名注册商处配置 DNS 解析

## 个人网站能干啥？

- 谢益辉：<https://yihui.org>
- 高春辉：<https://bio-spring.top>
- 严建兵：<https://blog.sina.com.cn/u/1253988497>
  - 玉米组：<http://maizego.org>

## 比特海自渡的方舟 {.smaller}

::: {.columns}
::: {.column width=50%}
当代码刻刀在网络荒原划出第一道弧线  
你的域名便成了自渡的舟

文字攀着 HTML 的藤蔓生长成大树  
代码沿着击键的声响织成捕捉星尘的密网  
生活的碎片在这里被重新拼凑

不必再蜷缩在社交平台的蜂巢格  
这里——存放着不褪色的黄昏  
在服务器深处保持着  
你二十岁的星火

:::
::: {.column width=50%}
你掌纹搭建的方舟正收留着  
被算法冲散的吉光片羽

十六进制颜料调配的潮汐中  
柏林的诗与东京的星尘发生量子纠缠

整片比特海都随着你的心跳涨落

这艘永不锈蚀的电子方舟  
终将载着「我曾如此活过」的碑文  
驶向时间黑洞里  
温柔的锚点
:::
:::


## 拾遗

- 文件管理（我的经验分享）
- 代码审查（PR & Review）
- 域名注册（一天的生活费管一年）
- ICP 备案（免费备案）

## 课后作业 {.smaller}

::: {.columns}
::: {.column width=50%}
- 创建自己的个人网站
- 将自己网站的链接提交到课程仓库
- 时间 1 周

**格式要求**：

- `D2RS-2025spring/myHomePages` 
- [以 Issue 1 中以 Markdown 形式提交](https://github.com/D2RS-2025spring/myHomePages/issues/1)：

**附加选做**

- 为课程讲义提交 PR
  - `D2RS-2025spring/data-driven-reproducible-study`

:::
::: {.column width=50%}



```{r}
#| echo: false
#| fig-asp: 1
library(qrcode)
qr_code("https://github.com/D2RS-2025spring/myHomePages/issues/1") |> plot()
```
:::
:::
