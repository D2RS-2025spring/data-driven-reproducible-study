# 可重复的数据分析环境

本章节介绍如何建立一个标准化的、跨平台的可重复数据分析环境，提供有关工具和技术的具体指导，以确保科学研究的数据处理和分析能够被他人重新实现和验证。这包括从计算机硬件选择到软件工具的安装和使用的各个方面。

## 可重复性危机与其影响因素

### 科学研究中的可重复性问题

科学研究中的可重复性问题主要源于数据处理和分析过程中的多变性。未能记录和分享完整的实验方法、数据处理途径以及分析代码，导致其他研究人员难以复现相同的实验结果。

### 可重复性危机的成因

该危机通常是由于缺乏严格的实验设计、数据管理不善和缺乏透明的分析过程而造成的。使用不同的软件版本、数据格式不一致以及缺乏清晰的文档记录是常见的具体成因。

### 可重复性危机的后果

当研究不可重复时，科学发现的可信度和科学进步便受到质疑。负面影响包括误导性结论的传播、浪费研究资源以及对公共信任的损害。

## 可重复性研究的定义与重要性

### 实验设计与数据收集的可重复性

#### 实验方法

实验方法的标准化包括步骤细化和使用统一的协议，这能够增强结果的重现性。使用精确的实验描述，有利于避免方法学上的不确定性。

#### 数据格式

使用通用和结构化的数据格式（如 CSV、JSON）可以提升数据共享的便捷性和一致性，确保兼容性和对他人易理解。

#### 数据预处理

数据预处理的规范化涉及去除噪声、处理缺失值和标准化变量。遵循一贯的预处理流程可确保数据的一致性和结果的稳健性。

### 数据分析与结果解释的可重复性

#### 数据分析方法

采用明确的分析方法，并伴随详细的代码注释，能够确保数据处理的透明性。使用开源软件和公开算法有助于分析过程的重现。

#### 结果解释

结果应以科学、详尽的方式呈现，并包括不确定性的讨论。这有助于形成对结果合理性和普适性的理解。

#### 可视化

使用数据可视化工具展示复杂数据，图表应具有良好的可读性和直观呈现的能力。确保图表的解释清晰，观众可基于图表理解研究发现。

## 数据分析中的可重复性要求

### 数据和代码的规范化

#### 路径

规范化的文件路径结构利于数据组织，使数据易于被他人找到和检索，并有助于避免文件操作中的错误。

#### 命名

一致的命名规范有助于识别和管理文件及变量，节省时间并减少误解的机会。命名应尽量具有描述性和一致性。

#### 版本

版本控制系统（如Git）确保不同工作版本的可追溯性，帮助团队项目透明地合并和管理多个修改。

#### 注释

充分的代码注释可以提高代码可读性。对复杂的算法和逻辑给予解释能够帮助他人理解代码意图。

### 数据和代码文档编写

#### README

README文件应包括项目的基本信息、使用指引和依赖关系说明，帮助用户快速了解项目目标与使用方法。

#### 文档

全面的文档可以涵盖项目的设计选择、功能描述和操作指南，确保用户和开发者都能顺利使用和扩展项目。

#### 报告

分析报告用来记录研究过程和结果，帮助进行结果展示和评价，并为后续研究提供基础。

### 数据分析及可视化的结果复现

#### 代码

分享完整的分析代码，包括运算逻辑和函数，用以确保分析过程的透明性及结果的可检验性。

#### 数据

公开数据集和详细的描述文档保障他人能够正确获取、理解和再利用数据，忠实再现研究。

#### 结果

通过详细的步骤说明和附加材料，确保结果复现。实验变更和结果差异性也需完整记录。

## 可重复性研究的工具链

### 硬件与软件

#### 计算平台

##### CPU/GPU

#### CPU架构

##### x86/AMD64/ARM

#### GPU加速技术

##### CUDA/MPS

### 操作系统

##### Linux/Windows/MacOS

### 文件系统、权限与环境变量

#### 文件系统结构与导航

#### 文件权限管理

#### 环境变量配置

#### PATH 变量管理

### 终端及命令行

#### 终端使用基础

##### 重定向

#### 常用命令行工具

##### cp

**用途**：复制文件或目录。

**实例**：
```bash
cp source.txt destination.txt
```
解释：将 `source.txt` 文件复制为 `destination.txt`。如果 `destination.txt` 已存在，将被覆盖。

```bash
cp -r source_dir/ destination_dir/
```
解释：递归复制目录 `source_dir` 到 `destination_dir`。

---

##### mv

**用途**：移动或重命名文件/目录。

**实例**：
```bash
mv oldname.txt newname.txt
```
解释：将文件 `oldname.txt` 重命名为 `newname.txt`。

```bash
mv file.txt /path/to/destination/
```
解释：将文件 `file.txt` 移动到指定路径 `/path/to/destination/`。

---

##### rm

**用途**：删除文件或目录。

**实例**：

```bash
rm file.txt
```
解释：删除文件 `file.txt`。

```bash
rm -r directory/
```
解释：递归删除目录 `directory` 及其所有内容。

**注意**：`rm` 操作不可逆，需谨慎。

---

##### ls

**用途**：列出目录内容。

**实例**：
```bash
ls
```
解释：列出当前目录下的文件和目录。

```bash
ls -l
```
解释：以长格式显示文件信息，包括权限、所有者和大小。

```bash
ls -a
```
解释：显示包括隐藏文件（以 `.` 开头）的所有文件。

---

##### cat

**用途**：显示文件内容、连接多个文件。

**实例**：
```bash
cat file.txt
```
解释：显示文件 `file.txt` 的内容。

```bash
cat file1.txt file2.txt > merged.txt
```
解释：将 `file1.txt` 和 `file2.txt` 的内容合并到 `merged.txt` 中。

---

##### cd

**用途**：切换当前工作目录。

**实例**：
```bash
cd /path/to/directory/
```
解释：切换到指定路径 `/path/to/directory/`。

```bash
cd ..
```
解释：返回到上一级目录。

---

##### ln

**用途**：创建链接（硬链接或符号链接）。

**实例**：
```bash
ln file.txt hardlink.txt
```
解释：创建 `file.txt` 的硬链接 `hardlink.txt`，两个文件共享相同的 inode。

```bash
ln -s /path/to/file symlink
```
解释：创建 `/path/to/file` 的符号链接（软链接） `symlink`。这是一个路径引用，而非内容共享。

--- 

这些命令是 Linux 文件管理的基础，能高效完成复制、移动、删除、查看等任务。

#### 系统配置与优化

##### zsh/oh-my-zsh

##### 自学

### 编程语言

##### R/Python

#### R 语言的长处

#### Python 语言的长处

#### 我究竟需要掌握哪些语言？

### 版本控制

##### Git、GitHub、Gitee

#### 什么是版本控制？

#### 为什么需要做版本控制？

#### 为什么使用 Git？

### 认证系统

##### SSH、API Key

#### SSH原理简介

#### 密钥生成与管理

#### 远程连接配置

### 软件包管理

##### conda、renv

#### 依赖关系

#### 操作系统的包管理器

##### winget/scoop/chocolatey/apt/brew

#### 源码编译安装

### 文档系统

##### Markdown、Quarto

### 现代工具

##### AI辅助编程、R包开发、持续性集成

## 上手实操指南

在自己电脑上配置一个可重复的数据分析环境。

1.  安装脚本语言工具 R 
    1.  安装 R（最新版本）
    2.  安装 Rtools（对应版本）
    3.  安装 `tidyverse` R 包（CRAN）
    4.  安装 `DEseq2` R 包（Bioconductor）
    5.  安装 `ggVennDiagram` R 包（GitHub）

2.  安装 Conda（Anaconda/Miniconda）和 Python（3.10 版本）
    1.  安装 Anaconda/Miniconda，创建一个 Python 3.10 的环境
    2.  使用 Conda 安装 `matplotlib` 模块
    3.  使用 Pip 安装 `htseq` 模块

3.  安装 Git，注册 GitHub/Gitee 账号
    1.  安装 Git
    2.  注册 GitHub（国际）/Gitee（国内）账号
    3.  加入课程群

4.  安装 RStudio
    1.  下载安装RStudio 

5.  安装 Quarto
    1.  下载安装 Quarto
    2.  在 VSCode 中配置 Quarto
    3.  创建一个“Hello World”项目

6.  安装和配置 VSCode
    1.  安装 VSCode
    2.  安装 R 插件（R Language Support）
    3.  安装 Python 插件（Python 和可用环境）
    4.  安装 Git 插件
    5.  安装 Quarto 插件
    6.  安装 Cline 插件或 CodeGeeX 插件

## 课后作业及解答

-   确保电脑上安装了 R、Python 等需要用到的软件

-   请在雨课堂内完成分组（第二次上课时确认）

-   请与助教取得联系，建立学习小组
