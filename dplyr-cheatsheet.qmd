# dplyr 速查表

dplyr 函数配合管道操作符使用，并且要求数据满足整洁格式。

在整洁数据中：

- 每个**变量**独占一列
- 每个**观测值**或**样本**独占一行
- 管道操作符 `x |> f(y)` 等价于 `f(x,y)`

```{r}
library(dplyr)
```

```{r}
#| label: other-used-packages
#| include: false

library(tibble)
mtcars = as_tibble(mtcars)
```


## 汇总观测值

对列应用**汇总函数**生成汇总统计表。汇总函数接收向量输入并返回单个值输出（参见汇总函数章节）。

- `summarize(.data, ...)`：创建汇总统计表

  ```{r}
  mtcars |> summarize(avg = mean(mpg))
  ```

- `count(.data, ..., wt = NULL, sort = FLASE, name = NULL)`：按 `...` 变量分组的行数统计。类似函数还有 `tally()`, `add_count()`, `add_tally()`。

  ```{r}
  mtcars |> count(cyl)
  ```


## 分组观测

- `group_by(.data, ..., .add = FALSE, .drop = TRUE)` 创建分组副本，dplyr 函数会对每个分组单独操作后合并结果

  ```{r}
  mtcars |>
  group_by(cyl) |>
  summarize(avg = mean(mpg))
  ```

- `rowwise(.data, ...)` 将数据转换为逐行分组模式，便于按行运算（适合处理列表类列数据），详见 tidyr 速查表中的列表列工作流

  ```{r}
  starwars |>
  rowwise() |>
  mutate(film_count = length(films))
  ```

- `ungroup(x, ...)` 返回非分组数据副本

  ```{r}
  #| include: false

  g_mtcars <- mtcars |> group_by(cyl)
  ungroup(g_mtcars)
  ```


## 操作观测

### 提取观测

行操作函数返回满足条件的行子集表

- `filter(.data, ..., .preserve = FALSE)` 筛选符合逻辑条件的行

  ```{r}
  mtcars |> filter(mpg > 20)
  ```

- `distinct(.data, ..., .keep_all = FALSE)` 删除重复行

  ```{r}
  mtcars |> distinct(gear)
  ```

- `slice(.data, ...,, .preserve = FALSE)` 按位置选择行

  ```{r}
  mtcars |> slice(10:15)
  ```

- `slice_sample(.data, ..., n, prop, weight_by = NULL, replace = FALSE)` 随机抽样行，支持数量抽样（n）和比例抽样（prop）

  ```{r}
  mtcars |> slice_sample(n = 5, replace = TRUE)
  ```

- `slice_min(.data, order_by, ..., n, prop, with_ties = TRUE)` 与 `slice_max()` 选择极值行

  ```{r}
  mtcars |> slice_min(mpg, prop = 0.25)
  ```

- `slice_head(.data, ..., n, prop)` 与 `slice_tail()` 选择首尾行

  ```{r}
  mtcars |> slice_head(n = 5)
  ```

#### 适用于 `filter()` 的逻辑运算符

- `==`
- `<`
- `<=`
- `is.na()`
- `%in%`
- `|`
- `xor()`
- `!=`
- `>`
- `>=`
- `!is.na()`
- `!`
- `&`
- 其他运算符参见 `?base::Logic` 和 `?Comparison`


### 排序观测

- `arrange(.data, ..., .by_group = FALSE)` 按列值升序排列，配合 `desc()` 实现降序

  ```{r}
  mtcars |> arrange(mpg)
  mtcars |> arrange(desc(mpg))
  ```

### 添加观测

- `add_row(.data, ..., .before = NULL, .after = NULL)` 添加一行或多行数据

  ```{r}
  cars |> add_row(speed = 1, dist = 1)
  ```


## 操作变量

### 提取变量

列操作函数返回列的子集（向量或表格）

- `pull(.data, var = -1, name = NULL, ...)` 按名称或位置提取列向量

  ```{r}
  mtcars |> pull(wt)
  ```

- `select(.data, ...)` 提取列生成新表

  ```{r}
  mtcars |> select(mpg, wt)
  ```

- `relocate(.data, ..., .before = NULL, .after = NULL)` 调整列位置

  ```{r}
  mtcars |> relocate(mpg, cyl, .after = last_col())
  ```

#### `select()` 和 `across()` 辅助函数

```{r}
mtcars |> select(mpg:cyl)
```

- `contains(match)`
- `num_range(prefix, range)`
- `:`，例如 `mpg:cyl`
- `ends_with(match)`
- `all_of(x)` 或 `any_of(x, ..., vars)`
- `!`，例如 `!gear`
- `starts_with(match)`
- `matches(match)`
- `everything()`


### 批量操作多列

  ```{r}
  df <- tibble(x_1 = c(1, 2), x_2 = c(3, 4), y = c(4, 5))
  ```

- `across(.cols, .fun, ..., .name = NULL)` 对多列进行统一汇总或转换操作

  ```{r}
  df |> summarize(across(everything(), mean))
  ```

- `c_across(.cols)` 在行式数据中跨列运算

  ```{r}
  df |> 
    rowwise() |>
    mutate(x_total = sum(c_across(1:2)))
  ```


### 创建新变量

对列应用**向量化函数**（接收向量输入并返回等长向量，参见向量化函数章节）生成新列

- `mutate(.data, ..., .keep = "all", .before = NULL, .after = NULL)` 创建新列，类似函数 `add_column()`

  ```{r}
  mtcars |> mutate(gpm = 1 / mpg)
  mtcars |> mutate(mtcars, gpm = 1 / mpg, .keep = "none")
  ```

- `rename(.data, ...)` 重命名列，`rename_with()` 可通过函数批量重命名

  ```{r}
  mtcars |> rename(miles_per_gallon = mpg)
  ```


## 向量化函数

### 适用于 `mutate()`

### 位移操作

- `dplyr::lag()` 向前位移
- `dplyr::lead()` 向后位移

### 累积计算

- `dplyr::cumall()` 累积逻辑与
- `dply::cumany()` 累积逻辑或
- `cummax()` 累积最大值
- `dplyr::cummean()` 累积均值
- `cummin()` 累积最小值
- `cumprod()` 累积乘积
- `cumsum()` 累积求和

### 排序计算

- `dplyr::cume_dist()` 累积分布比例
- `dplyr::dense_rank()` 紧密排名（无间隔）
- `dplyr::min_rank()` 最小排名
- `dplyr::ntile()` 分位数分组
- `dplyr::percent_rank()` 标准化排名
- `dplyr::row_number()` 行编号（首位优先）

### 数学运算

- `+`, `-`, `/`, `^`, `%/%`, `%%` 算术运算符
- `log()`, `log2()`, `log10()` 对数函数
- `<`, `<=`, `>`, `>=`, `!=`, `==` 比较运算符
- `dplyr::between()` 区间判断
- `dplyr::near()` 近似相等判断

### 扩展功能

- `dplyr::case_when()` 多条件判断

  ```{r}
  starwars |>
    mutate(type = case_when(
      height > 200 | mass > 200 ~ "large",
      species == "Droid" ~ "robot",
      TRUE ~ "other"
    ))
  ```

- `dplyr::coalesce()` 首有效值选取
- `dplyr::if_else()` 元素级条件判断
- `dplyr::na_if()` 特定值替换为 NA
- `pmax()` 元素级最大值
- `pmin()` 元素级最小值


## 汇总函数

### 适用于 `summarize()`

### 计数类

- `dplyr::n()` 计数
- `dplyr::n_distinct()` 唯一值计数
- `sum(!is.na())` 非空值计数

### 位置度量

- `mean()` 均值
- `median()` 中位数

### 逻辑运算

- `mean()` 真值比例
- `sum()` 真值数量

### 顺序提取

- `dplyr::first()` 首元素
- `dplyr::last()` 末元素
- `dplyr::nth()` 指定位置元素

### 极值提取

- `quantile()` 分位数
- `min()` 最小值
- `max()` 最大值

### 离散度量

- `IQR()` 四分位距
- `mad()` 绝对中位差
- `sd()` 标准差
- `var()` 方差


## 行名处理

整洁数据不使用行名（存储于列外部的变量）。需要行名操作时：

- `tibble::rownames_to_column()` 行名转列

  ```{r}
  a <- rownames_to_column(mtcars, var = "C")
  ```

- `tibble::columns_to_rownames()` 列转行名

  ```{r}
  column_to_rownames(a, var = "C")
  ```

- 配套函数 `tibble::has_rownames()` 和 `tibble::remove_rownames()`


## 表格合并

```{r}
x <- tribble(
   ~A,  ~B, ~C,
  "a", "t",  1,
  "b", "u",  2,
  "c", "v",  3
)

y <- tribble(
   ~A,  ~B, ~D,
  "a", "t",  3,
  "b", "u",  2,
  "d", "w",  1
)
```

### 横向合并

- `bind_cols(..., .name_repair)` 横向拼接表格（不自动匹配列名）

### 纵向叠加

- `bind_rows(..., .id = NULL)` 纵向合并，`.id` 参数可添加来源标识列

### 关系连接

**扩展连接**通过匹配键合并表格列：

- `left_join(x, y)` 左连接
- `right_join(x, y)` 右连接
- `inner_join(x, y)` 内连接
- `full_join(x, y)` 全连接

**过滤连接**按另一个表筛选当前表：

- `semi_join(x, y)` 交集筛选
- `anti_join(x, y)` 差集筛选

**嵌套连接**：

- `nest_join(x, y)` 内连接结果嵌套存储

### 连接键设置

- 多列匹配：`by = join_by(col1, col2)`

  ```{r}
  left_join(x, y, by = join_by(A))
  left_join(x, y, by = join_by(A, B))
  ```

- 跨名匹配：`by = join_by(col1 == col2)`

  ```{r}
  left_join(x, y, by = join_by(C == D))
  ```

- 同名后缀参数：`suffix`

  ```{r}
  left_join(x, y, by = join_by(C == D), suffix = c("1", "2"))
  ```

### 集合运算

- `intersect(x, y)` 交集
- `setdiff(x, y)` 差集
- `union(x, y)` 并集（去重）
- `setequal()` 集合相等判断

```{r}
# 设置随机种子
set.seed(123)

# 生成两个随机字母向量
x = sample(letters, 5)
y = sample(letters, 8)
print(x)
print(y)

# 交集  
intersect(x, y)

# 差集
setdiff(x, y)

# 并集
union(x, y)

# 集合相等
setequal(x, y)
```
